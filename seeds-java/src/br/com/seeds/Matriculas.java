/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.seeds;

import Classes.Cliente;
import Classes.Matricula;
import Classes.Professor;
import Classes.Turmas;
import ClassesDAO.*;
import Excessoes.BancoException;
import java.awt.event.*;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Guilherme
 */
public class Matriculas extends javax.swing.JFrame {

    StringBuffer nome = new StringBuffer();
    StringBuffer nomes = new StringBuffer();
    int apagar = 0;
    int codigo = 0;
    String data = "";

    /**
     * Creates new form Matriculas
     */
    public Matriculas() throws BancoException {
        initComponents();

        txtCodigo.setDocument(new OnlyNumberField(11));
        txtCodigoAluno.setDocument(new OnlyNumberField(11));
        txtCodigoLocalidade.setDocument(new OnlyNumberField(11));
        txtCodigoTurma.setDocument(new OnlyNumberField(11));

        setLocationRelativeTo(null);
        txtCodigo.setDocument(new OnlyNumberField(11));

        try {
            MatriculaDAO dao = new MatriculaDAO();
            txtCodigo.setText("" + dao.gerarCodigoMatricula());
            dao.desconectar();
        } catch (BancoException f) {
            f.printStackTrace();
        }
        try {
            LocalidadeDAO dao = new LocalidadeDAO();
            txtCodigoLocalidade.setText(String.valueOf(dao.gerarCodigoLocalidade() - 1));
            dao.desconectar();
        } catch (BancoException f) {
            f.printStackTrace();
        }
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                try {
                    try {
                        try {

                            Fechando();

                        } catch (ParseException ex) {
                            Logger.getLogger(BuscarSubprodutosCaixaVenda.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(BuscarSubprodutosCaixaVenda.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (BancoException ex) {
                    Logger.getLogger(BuscarSubprodutosCaixaVenda.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    public void Fechando() throws BancoException, SQLException, ParseException {
        this.dispose();
    }

    public void FechandoAbrindoAluno() throws BancoException, SQLException, ParseException {
        this.dispose();
        new Clientes().setVisible(true);
    }

    public void DataAlterando(String data, int Componente) {

        Date date = null;
        DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");

        try {

            date = (java.util.Date) formatter.parse(data);
        } catch (java.text.ParseException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (Componente == 1) {
            txtDataNascimento.setDate(date);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtCodigoAluno = new javax.swing.JTextField();
        txtNome = new javax.swing.JTextField();
        jFTVisorCPF1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        txtCodigoTurma = new javax.swing.JTextField();
        txtDia = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtHI = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        txtHF = new javax.swing.JFormattedTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtCelular = new javax.swing.JFormattedTextField();
        jLabel46 = new javax.swing.JLabel();
        txtTelefone = new javax.swing.JFormattedTextField();
        jLabel40 = new javax.swing.JLabel();
        txtDataNascimento = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        txtNomeProfessor = new javax.swing.JTextField();
        txtCodigoProfessor = new javax.swing.JTextField();
        txtCodigoLocalidade = new javax.swing.JTextField();
        jBSalvar = new javax.swing.JButton();
        jBAlterar = new javax.swing.JButton();
        jBLimpar = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        jBBuscarTurma = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Matrícula");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jLabel2.setText("* Aluno:");
        jLabel2.setToolTipText("Dia da semana.");

        jLabel3.setText("* Turma:");
        jLabel3.setToolTipText("Dia da semana.");

        txtCodigoAluno.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCodigoAluno.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodigoAluno.setToolTipText("Pressione enter para pesquisar.");
        txtCodigoAluno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodigoAlunoFocusLost(evt);
            }
        });
        txtCodigoAluno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodigoAlunoKeyPressed(evt);
            }
        });

        txtNome.setEditable(false);
        txtNome.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jFTVisorCPF1.setEditable(false);
        jFTVisorCPF1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel4.setText("CPF");

        jLabel5.setText("Nome:");

        txtCodigoTurma.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCodigoTurma.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodigoTurma.setToolTipText("Pressione enter para pesquisar.");
        txtCodigoTurma.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodigoTurmaFocusLost(evt);
            }
        });
        txtCodigoTurma.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodigoTurmaKeyPressed(evt);
            }
        });

        txtDia.setEditable(false);
        txtDia.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel6.setText("Dia:");

        jLabel7.setText("Horário: ");
        jLabel7.setToolTipText("Hora do início.");

        txtHI.setEditable(false);
        try {
            txtHI.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtHI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel8.setText("às");

        txtHF.setEditable(false);
        try {
            txtHF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtHF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/buscar.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/buscar.png"))); // NOI18N
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel9.setText("Celular:");

        txtCelular.setEditable(false);
        try {
            txtCelular.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtCelular.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel46.setText("Telefone:");

        txtTelefone.setEditable(false);
        try {
            txtTelefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) ####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtTelefone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel40.setText("* Data Nasc.");

        txtDataNascimento.setEnabled(false);
        txtDataNascimento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel11.setText("Desconto (%)");
        jLabel11.setToolTipText("%");

        jSpinner1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        jSpinner1.setToolTipText("Taxa de desconto na compra de produtos.");
        jSpinner1.setEnabled(false);

        txtNomeProfessor.setEditable(false);
        txtNomeProfessor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtNomeProfessor.setToolTipText("");

        txtCodigoProfessor.setEditable(false);
        txtCodigoProfessor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCodigoProfessor.setToolTipText("");

        txtCodigoLocalidade.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNome))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHI, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtHF, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCodigoProfessor, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNomeProfessor))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCodigoAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCodigoLocalidade, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jFTVisorCPF1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCodigoTurma, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addGap(30, 30, 30)
                                .addComponent(txtDia, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(txtCelular, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel46)
                                .addGap(18, 18, 18)
                                .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel40)
                                .addGap(18, 18, 18)
                                .addComponent(txtDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel5});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCodigoAluno, txtCodigoTurma});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtCodigoAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jFTVisorCPF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel11)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCodigoLocalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(txtCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel46)
                        .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel40))
                    .addComponent(txtDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(txtCodigoTurma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtHI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(txtHF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNomeProfessor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCodigoProfessor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtCodigoAluno, txtCodigoTurma});

        jBSalvar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/entrar.png"))); // NOI18N
        jBSalvar.setText("Salvar");
        jBSalvar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalvarActionPerformed(evt);
            }
        });

        jBAlterar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/view-refresh.png"))); // NOI18N
        jBAlterar.setText("Alterar");
        jBAlterar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAlterarActionPerformed(evt);
            }
        });

        jBLimpar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jBLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/draw-eraser (2).png"))); // NOI18N
        jBLimpar.setText("Limpar");
        jBLimpar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLimparActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        jLabel10.setText("* CAMPOS OBRIGATÓRIOS.");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jLabel1.setText("Matricula");
        jLabel1.setToolTipText("Turma.");

        txtCodigo.setEditable(false);
        txtCodigo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jBBuscarTurma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/buscar.png"))); // NOI18N
        jBBuscarTurma.setBorderPainted(false);
        jBBuscarTurma.setContentAreaFilled(false);
        jBBuscarTurma.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBBuscarTurma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarTurmaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBBuscarTurma, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBBuscarTurma, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/Cliente.png"))); // NOI18N
        jButton3.setText("Aluno");
        jButton3.setToolTipText("Ir para Interface Alunos.");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBAlterar, jBLimpar, jBSalvar, jButton3});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBAlterar, jBLimpar, jBSalvar, jButton3});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalvarActionPerformed
        if (txtCodigo.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Campo Código tem que ser informado!\n"
                    + "Clique Incluir",
                    "Atenção!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            if (txtCodigoAluno.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Campo Código do Aluno tem que ser informado!\n"
                        + "",
                        "Atenção!", JOptionPane.INFORMATION_MESSAGE);
            } else {
                if (txtCodigoTurma.getText().equals("")) {
                    JOptionPane.showMessageDialog(this, "Campo Código da Turma tem que ser informado!\n"
                            + "",
                            "Atenção!", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    txtCodigoAluno.setText(txtCodigoAluno.getText().trim());
                    apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                    nome.delete(0, apagar);
                    nome.append(txtCodigoAluno.getText());
                    apagar = nomes.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                    nomes.delete(0, apagar);
                    nomes.append(txtCodigoLocalidade.getText());
                    try {
                        ClientesDAO daoss = new ClientesDAO();
                        Cliente cliente = new Cliente();
                        cliente = daoss.carregarClientePeloCodigo(nome, nomes);

                        if (cliente.getNome().equals("nulo")) {
                            JOptionPane.showMessageDialog(this,
                                    "O cliente informado [" + nome + "] não consta no banco!");
                            txtCodigoAluno.setText("");
                        } else {

                            txtCodigoTurma.setText(txtCodigoTurma.getText().trim());
                            apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                            nome.delete(0, apagar);
                            nome.append(txtCodigoTurma.getText());
                            TurmasDAO daosss = new TurmasDAO();
                            Turmas turmass = new Turmas();
                            turmass = daosss.carregarTurmaPeloCodigo(nome);

                            if (turmass.getDia().equals("nulo")) {
                                JOptionPane.showMessageDialog(this,
                                        "A Turma informada [" + nome + "] não consta no banco!");
                                txtCodigoTurma.setText("");
                            } else {
                                Matricula matriculas = new Matricula();
                                MatriculaDAO dao = new MatriculaDAO();
                                matriculas.setCodigo(Integer.parseInt(txtCodigo.getText()));
                                matriculas.setCodigoAluno(Integer.parseInt(txtCodigoAluno.getText()));
                                matriculas.setLocalidade(Integer.parseInt(txtCodigoLocalidade.getText()));
                                matriculas.setCodigoTurma(Integer.parseInt(txtCodigoTurma.getText()));
                                try {
                                    dao.adicionarMatriculas(matriculas);
                                    JOptionPane.showMessageDialog(null, "Cadastro efetuado com sucesso!");
                                    try {
                                        MatriculaDAO daous = new MatriculaDAO();
                                        txtCodigo.setText("" + dao.gerarCodigoMatricula());
                                        daous.desconectar();
                                    } catch (BancoException f) {
                                        f.printStackTrace();
                                    }
                                    txtCodigoAluno.setText("");
                                    txtCodigoTurma.setText("");
                                    txtCodigoProfessor.setText("");
                                    txtNome.setText("");
                                    jFTVisorCPF1.setText("");
                                    txtCelular.setText("");
                                    txtTelefone.setText("");
                                    jSpinner1.setValue(0);
                                    txtHF.setText("");
                                    txtHI.setText("");
                                    txtNomeProfessor.setText("");
                                    txtDia.setText("");
                                    txtDataNascimento.setDate(null);
                                    dao.desconectar();
                                } catch (Exception e) {
                                }
                            }
                            daosss.desconectar();
                            turmass = null;
                        }
                        cliente = null;
                        daoss.desconectar();
                    } catch (BancoException ex) {
                        Logger.getLogger(Matriculas.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_jBSalvarActionPerformed

    private void jBBuscarTurmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarTurmaActionPerformed
        final BuscarMatriculas pesq = new BuscarMatriculas("Matrículas");
        pesq.setVisible(true);

        ActionListener acaoOk = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                nome.delete(0, apagar);
                nome.append(pesq.getCodigoCliente());
                try {
                    txtCodigo.setText("");
                    txtCodigoAluno.setText("");
                    txtCodigoTurma.setText("");
                    MatriculaDAO dao = new MatriculaDAO();
                    Matricula matriculas = new Matricula();
                    matriculas = dao.carregarMatriculaPeloCodigo(nome);
                    txtCodigo.setText(String.valueOf(matriculas.getCodigo()));
                    txtCodigoAluno.setText(String.valueOf(matriculas.getCodigoAluno()));
                    txtCodigoLocalidade.setText(String.valueOf(matriculas.getLocalidade()));
                    txtCodigoTurma.setText(String.valueOf(matriculas.getCodigoTurma()));

                    apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                    nome.delete(0, apagar);
                    nome.append(txtCodigoAluno.getText());
                    apagar = nomes.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                    nomes.delete(0, apagar);
                    nomes.append(txtCodigoLocalidade.getText());
                    ClientesDAO daoss = new ClientesDAO();
                    Cliente cliente = new Cliente();
                    cliente = daoss.carregarClientePeloCodigo(nome, nomes);
                    txtNome.setText("");
                    jFTVisorCPF1.setText("");
                    txtCelular.setText("");
                    txtTelefone.setText("");
                    jSpinner1.setValue(0);
                    txtCodigoAluno.setText(String.valueOf(cliente.getCodigo()));
                    txtNome.setText(cliente.getNome());
                    data = cliente.getNascimento();
                    if (data == null) {
                        JOptionPane.showMessageDialog(rootPane,
                                "Escolha um cliente antes de apertar OK!",
                                "Seeds", JOptionPane.ERROR_MESSAGE);
                    } else {
                        DataAlterando(data, 1);
                        data = null;
                        data = cliente.getNascimento();
                        DataAlterando(data, Integer.parseInt("1"));
                        jFTVisorCPF1.setText(cliente.getCpf());
                        txtTelefone.setText(cliente.getTelefone());
                        txtCelular.setText(cliente.getCelular());
                        jSpinner1.setValue(cliente.getDesconto());

                        apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                        nome.delete(0, apagar);
                        nome.append(txtCodigoTurma.getText());
                        TurmasDAO daosss = new TurmasDAO();
                        Turmas turmass = new Turmas();
                        turmass = daosss.carregarTurmaPeloCodigo(nome);
                        txtHF.setText("");
                        txtHI.setText("");
                        txtNomeProfessor.setText("");
                        txtDia.setText("");
                        txtCodigoTurma.setText(String.valueOf(turmass.getCodigo()));
                        txtDia.setText(turmass.getDia());
                        txtHI.setText(turmass.getHi());
                        txtHF.setText(turmass.getHf());
                        txtCodigoProfessor.setText(turmass.getFuncionario() + "");

                        txtCodigoProfessor.setText(txtCodigoProfessor.getText().trim());
                        apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                        nome.delete(0, apagar);
                        nome.append(txtCodigoProfessor.getText());
                        ProfessorDAO daos = new ProfessorDAO();
                        Professor professor = new Professor();
                        professor = daos.carregarProfessorPeloCodigo(nome);
                        if (professor.getNome().equals("nulo")) {
                        } else {

                            txtCodigoProfessor.setText(String.valueOf(professor.getCodigo()));
                            txtNomeProfessor.setText(professor.getNome());
                        }
                        daos.desconectar();
                        daosss.desconectar();
                        turmass = null;
                    }
                    cliente = null;
                    dao.desconectar();
                    daoss.desconectar();
                } catch (BancoException b) {
                    JOptionPane.showMessageDialog(null, e);
                }
                pesq.dispose();
            }
        };
        pesq.setAcao(acaoOk);
    }//GEN-LAST:event_jBBuscarTurmaActionPerformed

    private void jBLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLimparActionPerformed
        try {
            MatriculaDAO dao = new MatriculaDAO();
            //Matricula matriculas = new Matricula();
            txtCodigo.setText("" + dao.gerarCodigoMatricula());
            //matriculas = null;
            dao.desconectar();
        } catch (BancoException f) {
            f.printStackTrace();
        }
        txtCodigoAluno.setText("");
        txtCodigoTurma.setText("");
        txtCodigoProfessor.setText("");
        txtNome.setText("");
        jFTVisorCPF1.setText("");
        txtCelular.setText("");
        txtTelefone.setText("");
        jSpinner1.setValue(0);
        txtHF.setText("");
        txtHI.setText("");
        txtNomeProfessor.setText("");
        txtDia.setText("");
        txtDataNascimento.setDate(null);
    }//GEN-LAST:event_jBLimparActionPerformed

    private void jBAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAlterarActionPerformed
        txtCodigo.setText(txtCodigo.getText().trim());
        apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
        nome.delete(0, apagar);
        nome.append(txtCodigo.getText());
        try {
            ClientesDAO daoss = new ClientesDAO();
            Cliente cliente = new Cliente();
            MatriculaDAO dao = new MatriculaDAO();
            Matricula matriculas = new Matricula();
            matriculas = dao.carregarMatriculaPeloCodigo(nome);
            if (matriculas.getCodigo() == 0) {
                JOptionPane.showMessageDialog(this,
                        "Não consta no banco!");
            } else {
                if (txtCodigo.getText().equals("")) {
                    JOptionPane.showMessageDialog(this, "Campo Código tem que ser informado!\n"
                            + "Clique Incluir",
                            "Atenção!", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    if (txtCodigoAluno.getText().equals("")) {
                        JOptionPane.showMessageDialog(this, "Campo Código do Aluno tem que ser informado!\n"
                                + "",
                                "Atenção!", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        if (txtCodigoTurma.getText().equals("")) {
                            JOptionPane.showMessageDialog(this, "Campo Código da Turma tem que ser informado!\n"
                                    + "",
                                    "Atenção!", JOptionPane.INFORMATION_MESSAGE);
                        } else {

                            txtCodigoAluno.setText(txtCodigoAluno.getText().trim());
                            apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                            nome.delete(0, apagar);
                            nome.append(txtCodigoAluno.getText());
                            apagar = nomes.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                            nomes.delete(0, apagar);
                            nomes.append(txtCodigoLocalidade.getText());

                            cliente = daoss.carregarClientePeloCodigo(nome, nomes);

                            if (cliente.getNome().equals("nulo")) {
                                JOptionPane.showMessageDialog(this,
                                        "O cliente informado [" + nome + "] não consta no banco!");
                                txtCodigoAluno.setText("");
                            } else {

                                txtCodigoTurma.setText(txtCodigoTurma.getText().trim());
                                apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                                nome.delete(0, apagar);
                                nome.append(txtCodigoTurma.getText());
                                TurmasDAO daosss = new TurmasDAO();
                                Turmas turmass = new Turmas();
                                turmass = daosss.carregarTurmaPeloCodigo(nome);

                                if (turmass.getDia().equals("nulo")) {
                                    JOptionPane.showMessageDialog(this,
                                            "A Turma informada [" + nome + "] não consta no banco!");
                                    txtCodigoTurma.setText("");
                                } else {

                                    matriculas.setCodigo(Integer.parseInt(txtCodigo.getText()));
                                    matriculas.setCodigoAluno(Integer.parseInt(txtCodigoAluno.getText()));
                                    matriculas.setCodigoTurma(Integer.parseInt(txtCodigoTurma.getText()));
                                    try {
                                        dao.atualizaDados(matriculas);
                                        JOptionPane.showMessageDialog(null, "Efetuado com sucesso!");
                                        matriculas = null;
                                    } catch (Exception e) {
                                    }
                                }
                                daosss.desconectar();
                                turmass = null;
                            }
                        }
                    }
                }
            }
            cliente = null;
            dao.desconectar();
            daoss.desconectar();
        } catch (BancoException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jBAlterarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        txtCodigoTurma.requestFocus();
        try {
            ClientesDAO daoss = new ClientesDAO();
            Cliente cliente = new Cliente();
            if (daoss.gerarCodigoCliente() == 1) {
                JOptionPane.showMessageDialog(this,
                        "O sistema não possuí um cliente cadastrado.",
                        "seeds",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                final BuscarClientes pesq = new BuscarClientes("Clientes");
                pesq.setVisible(true);

                ActionListener acaoOk = new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        StringBuffer codigoAluno = new StringBuffer();
                        int codigoCliente = 0;
                        codigoCliente = pesq.getCodigoCliente();
                        codigoAluno.append(codigoCliente);
                        apagar = nomes.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                        nomes.delete(0, apagar);
                        nomes.append(txtCodigoLocalidade.getText());
                        try {
                            ClientesDAO daoss = new ClientesDAO();
                            Cliente cliente = new Cliente();
                            txtNome.setText("");
                            jFTVisorCPF1.setText("");
                            txtCelular.setText("");
                            txtTelefone.setText("");
                            jSpinner1.setValue(0);
                            cliente = daoss.carregarClientePeloCodigo(codigoAluno, nomes);
                            txtCodigoAluno.setText(String.valueOf(cliente.getCodigo()));
                            txtNome.setText(cliente.getNome());
                            data = cliente.getNascimento();
                            if (data.equals("")) {
                                JOptionPane.showMessageDialog(rootPane,
                                        "O cliente informado não consta no banco!",
                                        "Seeds", JOptionPane.ERROR_MESSAGE);
                            } else {
                                DataAlterando(data, 1);
                            }
                            data = null;
                            data = cliente.getNascimento();
                            DataAlterando(data, Integer.parseInt("1"));
                            jFTVisorCPF1.setText(cliente.getCpf());
                            txtTelefone.setText(cliente.getTelefone());
                            txtCelular.setText(cliente.getCelular());
                            jSpinner1.setValue(cliente.getDesconto());
                            cliente = null;
                            daoss.desconectar();
                        } catch (BancoException b) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        pesq.dispose();
                    }
                };
                pesq.setAcao(acaoOk);
            }
            cliente = null;
            daoss.desconectar();
        } catch (BancoException f) {
            f.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtCodigoAlunoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodigoAlunoFocusLost
    }//GEN-LAST:event_txtCodigoAlunoFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            TurmasDAO daosss = new TurmasDAO();
            if (daosss.gerarCodigoTurma() == 1) {
                JOptionPane.showMessageDialog(this,
                        "O sistema não possuí turma cadastrada.",
                        "seeds",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {

                final BuscarTurmas pesq = new BuscarTurmas("Turmas");
                pesq.setVisible(true);

                ActionListener acaoOk = new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        StringBuffer codigoTurma = new StringBuffer();
                        int codigoCliente = 0;
                        codigoCliente = pesq.getCodigoCliente();
                        codigoTurma.append(codigoCliente);
                        try {
                            TurmasDAO daosss = new TurmasDAO();
                            Turmas turmass = new Turmas();
                            turmass = daosss.carregarTurmaPeloCodigo(codigoTurma);
                            txtHF.setText("");
                            txtHI.setText("");
                            txtNomeProfessor.setText("");
                            txtDia.setText("");
                            txtCodigoTurma.setText(String.valueOf(turmass.getCodigo()));
                            txtDia.setText(turmass.getDia());
                            txtHI.setText(turmass.getHi());
                            txtHF.setText(turmass.getHf());
                            txtCodigoProfessor.setText(turmass.getFuncionario() + "");

                            txtCodigoProfessor.setText(txtCodigoProfessor.getText().trim());
                            apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                            nome.delete(0, apagar);
                            nome.append(txtCodigoProfessor.getText());
                            ProfessorDAO daos = new ProfessorDAO();
                            Professor professor = new Professor();
                            professor = daos.carregarProfessorPeloCodigo(nome);
                            if (professor.getNome().equals("nulo")) {
                            } else {

                                txtCodigoProfessor.setText(String.valueOf(professor.getCodigo()));
                                txtNomeProfessor.setText(professor.getNome());

                            }
                            daos.desconectar();
                            daosss.desconectar();
                            turmass = null;
                        } catch (BancoException b) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        pesq.dispose();
                    }
                };
                pesq.setAcao(acaoOk);
            }
            daosss.desconectar();
        } catch (BancoException f) {
            f.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtCodigoTurmaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodigoTurmaFocusLost
    }//GEN-LAST:event_txtCodigoTurmaFocusLost

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (!txtCodigoAluno.getText().equals("") && !txtCodigoTurma.getText().equals("")) {
            int selection = JOptionPane.showConfirmDialog(this,
                    "Deseja sair sem salvar o registro?",
                    "Seeds", JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            if (selection == JOptionPane.OK_OPTION) {

                try {
                    FechandoAbrindoAluno();
                } catch (BancoException ex) {
                    Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {
                    Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            try {
                FechandoAbrindoAluno();
            } catch (BancoException ex) {
                Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtCodigoTurmaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoTurmaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
            nome.delete(0, apagar);
            nome.append(txtCodigoTurma.getText());
            try {
                TurmasDAO daosss = new TurmasDAO();
                Turmas turmass = new Turmas();
                turmass = daosss.carregarTurmaPeloCodigo(nome);
                if (turmass.getDia().equals("nulo")) {

                    int selection = JOptionPane.showConfirmDialog(this,
                            "A turma informada não consta no banco!\n"
                            + "Deseja buscar os dados da turma?",
                            "seeds", JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.QUESTION_MESSAGE);
                    if (selection == JOptionPane.OK_OPTION) {
                        jButton1.requestFocus();
                        try {

                            if (daosss.gerarCodigoTurma() == 1) {
                                JOptionPane.showMessageDialog(this,
                                        "O sistema não possuí uma turma cadastrada.",
                                        "seeds",
                                        JOptionPane.INFORMATION_MESSAGE);
                            } else {

                                final BuscarTurmas pesq = new BuscarTurmas("Turmas");
                                pesq.setVisible(true);

                                ActionListener acaoOk = new ActionListener() {
                                    public void actionPerformed(ActionEvent e) {
                                        StringBuffer codigoTurma = new StringBuffer();
                                        int codigoCliente = 0;
                                        codigoCliente = pesq.getCodigoCliente();
                                        codigoTurma.append(codigoCliente);
                                        try {
                                            TurmasDAO dao = new TurmasDAO();
                                            Turmas turmass = new Turmas();
                                            txtHF.setText("");
                                            txtHI.setText("");
                                            txtNomeProfessor.setText("");
                                            txtDia.setText("");
                                            turmass = dao.carregarTurmaPeloCodigo(codigoTurma);
                                            txtCodigoTurma.setText(String.valueOf(turmass.getCodigo()));
                                            txtDia.setText(turmass.getDia());
                                            txtHI.setText(turmass.getHi());
                                            txtHF.setText(turmass.getHf());
                                            txtCodigoProfessor.setText(turmass.getFuncionario() + "");

                                            txtCodigoProfessor.setText(txtCodigoProfessor.getText().trim());
                                            apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                                            nome.delete(0, apagar);
                                            nome.append(txtCodigoProfessor.getText());
                                            ProfessorDAO daos = new ProfessorDAO();
                                            Professor professor = new Professor();
                                            professor = daos.carregarProfessorPeloCodigo(nome);
                                            if (professor.getNome().equals("nulo")) {
                                            } else {

                                                txtCodigoProfessor.setText(String.valueOf(professor.getCodigo()));
                                                txtNomeProfessor.setText(professor.getNome());

                                            }
                                            dao.desconectar();
                                            daos.desconectar();
                                        } catch (BancoException b) {
                                            JOptionPane.showMessageDialog(null, e);
                                        }
                                        pesq.dispose();
                                    }
                                };
                                pesq.setAcao(acaoOk);
                            }
                        } catch (BancoException f) {
                            f.printStackTrace();
                        }
                    } else {
                        txtCodigoTurma.setText("");
                    }

                } else {
                    txtHF.setText("");
                    txtHI.setText("");
                    txtNomeProfessor.setText("");
                    txtDia.setText("");
                    txtCodigoTurma.setText(String.valueOf(turmass.getCodigo()));
                    txtDia.setText(turmass.getDia());
                    txtHI.setText(turmass.getHi());
                    txtHF.setText(turmass.getHf());
                    txtCodigoProfessor.setText(turmass.getFuncionario() + "");

                    txtCodigoProfessor.setText(txtCodigoProfessor.getText().trim());
                    apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                    nome.delete(0, apagar);
                    nome.append(txtCodigoProfessor.getText());
                    ProfessorDAO daos = new ProfessorDAO();
                    Professor professor = new Professor();
                    professor = daos.carregarProfessorPeloCodigo(nome);
                    if (professor.getNome().equals("nulo")) {
                    } else {

                        txtCodigoProfessor.setText(String.valueOf(professor.getCodigo()));
                        txtNomeProfessor.setText(professor.getNome());
                    }
                    professor = null;
                    daos.desconectar();
                }
                turmass = null;
                daosss.desconectar();
            } catch (BancoException e) {
                e.printStackTrace();
            }
            apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
            nome.delete(0, apagar);
        }
    }//GEN-LAST:event_txtCodigoTurmaKeyPressed

    private void txtCodigoAlunoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoAlunoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
            nome.delete(0, apagar);
            nome.append(txtCodigoAluno.getText());
            apagar = nomes.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
            nomes.delete(0, apagar);
            nomes.append(txtCodigoLocalidade.getText());
            Cliente cliente = new Cliente();
            try {
                ClientesDAO dao = new ClientesDAO(); // estou instanciando a conexão
                cliente = dao.carregarClientePeloCodigo(nome, nomes);
                if (cliente.getNome().equals("nulo")) {

                    int selection = JOptionPane.showConfirmDialog(this,
                            "O Cliente informado não consta no banco!\n"
                            + "Deseja buscar os dados do cliente?",
                            "seeds", JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.QUESTION_MESSAGE);
                    if (selection == JOptionPane.OK_OPTION) {
                        try {
                            LocalidadeDAO daos = new LocalidadeDAO();
                            txtCodigoLocalidade.setText(String.valueOf(daos.gerarCodigoLocalidade() - 1));
                            daos.desconectar();
                        } catch (BancoException f) {
                            f.printStackTrace();
                        }
                        txtCodigoTurma.requestFocus();
                        try {
                            ClientesDAO daoss = new ClientesDAO();
                            if (daoss.gerarCodigoCliente() == 1) {
                                JOptionPane.showMessageDialog(this,
                                        "O sistema não possuí um cliente cadastrado.",
                                        "seeds",
                                        JOptionPane.INFORMATION_MESSAGE);
                            } else {

                                final BuscarClientes pesq = new BuscarClientes("Clientes");
                                pesq.setVisible(true);

                                ActionListener acaoOk = new ActionListener() {
                                    public void actionPerformed(ActionEvent e) {
                                        StringBuffer codigoAluno = new StringBuffer();
                                        int codigoCliente = 0;
                                        codigoCliente = pesq.getCodigoCliente();
                                        codigoAluno.append(codigoCliente);
                                        apagar = nomes.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                                        nomes.delete(0, apagar);
                                        nomes.append(txtCodigoLocalidade.getText());
                                        try {
                                            ClientesDAO dao = new ClientesDAO();
                                            Cliente cliente = new Cliente();
                                            cliente = dao.carregarClientePeloCodigo(codigoAluno, nomes);
                                            txtNome.setText("");
                                            jFTVisorCPF1.setText("");
                                            txtCelular.setText("");
                                            txtTelefone.setText("");
                                            jSpinner1.setValue(0);
                                            txtCodigoAluno.setText(String.valueOf(cliente.getCodigo()));
                                            txtNome.setText(cliente.getNome());
                                            data = cliente.getNascimento();
                                            if (data.equals("")) {
                                                JOptionPane.showMessageDialog(rootPane,
                                                        "O cliente informado não consta no banco!",
                                                        "Seeds", JOptionPane.ERROR_MESSAGE);
                                            } else {
                                                DataAlterando(data, 1);
                                            }
                                            data = null;
                                            data = cliente.getNascimento();
                                            DataAlterando(data, Integer.parseInt("1"));
                                            jFTVisorCPF1.setText(cliente.getCpf());
                                            txtTelefone.setText(cliente.getTelefone());
                                            txtCelular.setText(cliente.getCelular());
                                            jSpinner1.setValue(cliente.getDesconto());
                                            dao.desconectar();
                                        } catch (BancoException b) {
                                            JOptionPane.showMessageDialog(null, e);
                                        }
                                        pesq.dispose();
                                    }
                                };
                                pesq.setAcao(acaoOk);
                            }
                            daoss.desconectar();
                        } catch (BancoException f) {
                            f.printStackTrace();
                        }
                    } else {
                        txtCodigoAluno.setText("");
                    }

                } else {
                    txtNome.setText("");
                    jFTVisorCPF1.setText("");
                    txtCelular.setText("");
                    txtTelefone.setText("");
                    jSpinner1.setValue(0);
                    txtCodigoAluno.setText(String.valueOf(cliente.getCodigo()));
                    txtNome.setText(cliente.getNome());
                    data = null;
                    data = cliente.getNascimento();
                    DataAlterando(data, Integer.parseInt("1"));
                    jFTVisorCPF1.setText(cliente.getCpf());
                    txtTelefone.setText(cliente.getTelefone());
                    txtCelular.setText(cliente.getCelular());
                    jSpinner1.setValue(cliente.getDesconto());
                    apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                    nome.delete(0, apagar);
                    txtNome.requestFocus();

                }
                cliente = null;
                dao.desconectar();
            } catch (BancoException e) {
                e.printStackTrace();
            }
            apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
            nome.delete(0, apagar);
        }
    }//GEN-LAST:event_txtCodigoAlunoKeyPressed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAlterar;
    private javax.swing.JButton jBBuscarTurma;
    private javax.swing.JButton jBLimpar;
    private javax.swing.JButton jBSalvar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JTextField jFTVisorCPF1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JFormattedTextField txtCelular;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtCodigoAluno;
    private javax.swing.JTextField txtCodigoLocalidade;
    private javax.swing.JTextField txtCodigoProfessor;
    private javax.swing.JTextField txtCodigoTurma;
    private com.toedter.calendar.JDateChooser txtDataNascimento;
    private javax.swing.JTextField txtDia;
    private javax.swing.JFormattedTextField txtHF;
    private javax.swing.JFormattedTextField txtHI;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtNomeProfessor;
    private javax.swing.JFormattedTextField txtTelefone;
    // End of variables declaration//GEN-END:variables
}
