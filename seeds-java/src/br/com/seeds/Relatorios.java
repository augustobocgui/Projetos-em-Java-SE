/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.seeds;

import ClassesDAO.ClientesDAO;
import ClassesDAO.ContasRDAO;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Guilherme Augusto
 */
public class Relatorios extends javax.swing.JDialog {

    int selection;

    /**
     * Creates new form Relatorios
     */
    public Relatorios(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocation(150, 110);

        //Para Habilitar
        jTabbedPane1.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent me) {
                //Verificando se o botão direito do mouse foi clicado  
                if ((me.getModifiers() & MouseEvent.BUTTON3_MASK) != 0) {
                    JPopupMenu menus = new JPopupMenu();
                    JMenuItem item = new JMenuItem("Clique-me para Habilitar");
                    menus.add(item);

                    item.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent ae) {

                            jBPagamentosAN.setEnabled(true);
                            jDateRN.setEnabled(true);
                            jBPagamentosAA.setEnabled(true);
                            jDateRA1.setEnabled(true);
                            jBPagamentosIN.setEnabled(true);
                            jDateRN1.setEnabled(true);
                            jBPagamentosIA.setEnabled(true);
                            jDateRA.setEnabled(true);

                        }
                    });
                    menus.show(jTabbedPane1, me.getX(), me.getY());
                }
            }
        });

        //Para Habilitar Contratos
        jBContratos.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent me) {
                //Verificando se o botão direito do mouse foi clicado  
                if ((me.getModifiers() & MouseEvent.BUTTON3_MASK) != 0) {
                    JPopupMenu menus = new JPopupMenu();
                    JMenuItem item = new JMenuItem("Clique-me para Habilitar");
                    menus.add(item);

                    item.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent ae) {

                            jBContratos.setEnabled(true);

                        }
                    });
                    menus.show(jBContratos, me.getX(), me.getY());
                }
            }
        });
    }

    protected JRootPane createRootPane() {
        JRootPane rootPane = new JRootPane();
        KeyStroke stroke = KeyStroke.getKeyStroke("ESCAPE");
        Action actionListener = new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
                Relatorios.this.dispose();
            }
        };
        InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap.put(stroke, "ESCAPE");
        rootPane.getActionMap().put("ESCAPE", actionListener);
        return rootPane;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jBAlunosTurma = new javax.swing.JButton();
        jBEstoque = new javax.swing.JButton();
        jBTurmaAnalitico = new javax.swing.JButton();
        jBCaixaSaidas = new javax.swing.JButton();
        jBContasPagar = new javax.swing.JButton();
        jBContasReceber = new javax.swing.JButton();
        jBEstoqueEntrada = new javax.swing.JButton();
        jBEstoqueDevolucao = new javax.swing.JButton();
        jBVendas = new javax.swing.JButton();
        jBAlunosInativos = new javax.swing.JButton();
        jBCaixa = new javax.swing.JButton();
        jBContratos = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jFTCPF = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jBAlunos = new javax.swing.JButton();
        jBProfessores = new javax.swing.JButton();
        jBFornecedores = new javax.swing.JButton();
        jRBSalvar = new javax.swing.JRadioButton();
        jRBNaoSalvar = new javax.swing.JRadioButton();
        jBAcessos = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jBPagamentosAN = new javax.swing.JButton();
        jDateRN = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jButton20 = new javax.swing.JButton();
        jDateFinalRN = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jDateInicialRN = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jBPagamentosAA = new javax.swing.JButton();
        jDateRA1 = new com.toedter.calendar.JDateChooser();
        jLabel12 = new javax.swing.JLabel();
        jButton24 = new javax.swing.JButton();
        jDateFinalRA1 = new com.toedter.calendar.JDateChooser();
        jLabel13 = new javax.swing.JLabel();
        jDateInicialRA1 = new com.toedter.calendar.JDateChooser();
        jLabel14 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jDateInicialRN1 = new com.toedter.calendar.JDateChooser();
        jDateFinalRN1 = new com.toedter.calendar.JDateChooser();
        jLabel11 = new javax.swing.JLabel();
        jButton22 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jDateRN1 = new com.toedter.calendar.JDateChooser();
        jBPagamentosIN = new javax.swing.JButton();
        jBPagamentosIA = new javax.swing.JButton();
        jDateRA = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jButton19 = new javax.swing.JButton();
        jDateFinalRA = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jDateInicialRA = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jDateInicialRA2 = new com.toedter.calendar.JDateChooser();
        jLabel16 = new javax.swing.JLabel();
        jDateFinalRA2 = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Relatórios");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jBAlunosTurma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/CadastrosRelatórios.png"))); // NOI18N
        jBAlunosTurma.setText("Alunos Turma");
        jBAlunosTurma.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBAlunosTurma.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBAlunosTurma.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBAlunosTurma.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBAlunosTurma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAlunosTurmaActionPerformed(evt);
            }
        });

        jBEstoque.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/ProdutosEmFaltaRelatórios.png"))); // NOI18N
        jBEstoque.setText("Estoque");
        jBEstoque.setToolTipText("Estoque dos produtos.");
        jBEstoque.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBEstoque.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBEstoque.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBEstoque.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEstoqueActionPerformed(evt);
            }
        });

        jBTurmaAnalitico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/Cadastros.png"))); // NOI18N
        jBTurmaAnalitico.setText("Turma Analítico");
        jBTurmaAnalitico.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBTurmaAnalitico.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBTurmaAnalitico.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBTurmaAnalitico.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBTurmaAnalitico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTurmaAnaliticoActionPerformed(evt);
            }
        });

        jBCaixaSaidas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/FecharCaixaRelatórios.png"))); // NOI18N
        jBCaixaSaidas.setText("Saídas");
        jBCaixaSaidas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBCaixaSaidas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBCaixaSaidas.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBCaixaSaidas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBCaixaSaidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCaixaSaidasActionPerformed(evt);
            }
        });

        jBContasPagar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/ContasRelatórios.png"))); // NOI18N
        jBContasPagar.setText("Conta Pagar");
        jBContasPagar.setToolTipText("");
        jBContasPagar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBContasPagar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBContasPagar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBContasPagar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBContasPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBContasPagarActionPerformed(evt);
            }
        });

        jBContasReceber.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/ContasRelatórios.png"))); // NOI18N
        jBContasReceber.setText("Conta Receber");
        jBContasReceber.setToolTipText("");
        jBContasReceber.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBContasReceber.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBContasReceber.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBContasReceber.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBContasReceber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBContasReceberActionPerformed(evt);
            }
        });

        jBEstoqueEntrada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/Produtos - Entrada.png"))); // NOI18N
        jBEstoqueEntrada.setText("Entrada");
        jBEstoqueEntrada.setToolTipText("");
        jBEstoqueEntrada.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBEstoqueEntrada.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBEstoqueEntrada.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBEstoqueEntrada.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBEstoqueEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEstoqueEntradaActionPerformed(evt);
            }
        });

        jBEstoqueDevolucao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/Produtos - Devolução.png"))); // NOI18N
        jBEstoqueDevolucao.setText("Devolução");
        jBEstoqueDevolucao.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBEstoqueDevolucao.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBEstoqueDevolucao.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBEstoqueDevolucao.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBEstoqueDevolucao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEstoqueDevolucaoActionPerformed(evt);
            }
        });

        jBVendas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/VendasRelatórios.png"))); // NOI18N
        jBVendas.setText("Vendas");
        jBVendas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBVendas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBVendas.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBVendas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBVendas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVendasActionPerformed(evt);
            }
        });

        jBAlunosInativos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/ClientesInativos.png"))); // NOI18N
        jBAlunosInativos.setText("Inativos");
        jBAlunosInativos.setToolTipText("Alunos Inativos por Turma Analítico.");
        jBAlunosInativos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBAlunosInativos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBAlunosInativos.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBAlunosInativos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBAlunosInativos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAlunosInativosActionPerformed(evt);
            }
        });

        jBCaixa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/FecharCaixaRelatórios.png"))); // NOI18N
        jBCaixa.setText("Caixa");
        jBCaixa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBCaixa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBCaixa.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBCaixa.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBCaixa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCaixaActionPerformed(evt);
            }
        });

        jBContratos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/document-edit-sign (2).png"))); // NOI18N
        jBContratos.setText("Contratos");
        jBContratos.setBorderPainted(false);
        jBContratos.setContentAreaFilled(false);
        jBContratos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBContratos.setEnabled(false);
        jBContratos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBContratos.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBContratos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBContratos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBContratosActionPerformed(evt);
            }
        });

        jDateChooser1.setToolTipText("dd/MM/yyyy");

        try {
            jFTCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel1.setText("CPF");

        jLabel2.setText("Data");

        jBAlunos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/Clientes.png"))); // NOI18N
        jBAlunos.setText("Alunos");
        jBAlunos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBAlunos.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBAlunos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBAlunos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAlunosActionPerformed(evt);
            }
        });

        jBProfessores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/Funcionários.png"))); // NOI18N
        jBProfessores.setText("Professores");
        jBProfessores.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBProfessores.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBProfessores.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBProfessores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProfessoresActionPerformed(evt);
            }
        });

        jBFornecedores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/Fornecedores.png"))); // NOI18N
        jBFornecedores.setText("Fornecedores");
        jBFornecedores.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBFornecedores.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBFornecedores.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBFornecedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFornecedoresActionPerformed(evt);
            }
        });

        jRBSalvar.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(jRBSalvar);
        jRBSalvar.setText("Salvar cópia");

        jRBNaoSalvar.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(jRBNaoSalvar);
        jRBNaoSalvar.setSelected(true);
        jRBNaoSalvar.setText("Não salvar");

        jBAcessos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/acesso.png"))); // NOI18N
        jBAcessos.setText("Acessos");
        jBAcessos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBAcessos.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBAcessos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBAcessos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAcessosActionPerformed(evt);
            }
        });

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(null);

        jBPagamentosAN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/pagamentos.png"))); // NOI18N
        jBPagamentosAN.setText("Pagamentos");
        jBPagamentosAN.setToolTipText("");
        jBPagamentosAN.setBorderPainted(false);
        jBPagamentosAN.setContentAreaFilled(false);
        jBPagamentosAN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBPagamentosAN.setEnabled(false);
        jBPagamentosAN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBPagamentosAN.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBPagamentosAN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBPagamentosAN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPagamentosANActionPerformed(evt);
            }
        });
        jPanel2.add(jBPagamentosAN);
        jBPagamentosAN.setBounds(10, 48, 91, 75);

        jDateRN.setToolTipText("");
        jDateRN.setDateFormatString("yyyy/MM/dd");
        jDateRN.setEnabled(false);
        jDateRN.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDateRNFocusLost(evt);
            }
        });
        jPanel2.add(jDateRN);
        jDateRN.setBounds(10, 20, 105, 20);

        jLabel3.setText("* Registros novos");
        jLabel3.setToolTipText("Para registros do sistema atual use a formatação dd/MM/yyyy");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(10, 3, 86, 14);

        jButton20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/pagamentos.png"))); // NOI18N
        jButton20.setText("Pagamentos");
        jButton20.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton20.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton20.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButton20.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton20);
        jButton20.setBounds(111, 48, 91, 75);

        jDateFinalRN.setDateFormatString("yyyy/MM/dd");
        jDateFinalRN.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDateFinalRNFocusLost(evt);
            }
        });
        jPanel2.add(jDateFinalRN);
        jDateFinalRN.setBounds(216, 102, 87, 20);

        jLabel8.setText("Data Final");
        jLabel8.setToolTipText("Para registros do sistema antigo use a formatação yyyy/MM/dd");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(216, 86, 63, 14);

        jDateInicialRN.setDateFormatString("yyyy/MM/dd");
        jDateInicialRN.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDateInicialRNFocusLost(evt);
            }
        });
        jPanel2.add(jDateInicialRN);
        jDateInicialRN.setBounds(216, 62, 87, 20);

        jLabel7.setText("Data Inicial");
        jLabel7.setToolTipText("Para registros do sistema antigo use a formatação yyyy/MM/dd");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(216, 40, 63, 14);

        jBPagamentosAA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/pagamentos.png"))); // NOI18N
        jBPagamentosAA.setText("Pagamentos");
        jBPagamentosAA.setToolTipText("");
        jBPagamentosAA.setBorderPainted(false);
        jBPagamentosAA.setContentAreaFilled(false);
        jBPagamentosAA.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBPagamentosAA.setEnabled(false);
        jBPagamentosAA.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBPagamentosAA.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBPagamentosAA.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBPagamentosAA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPagamentosAAActionPerformed(evt);
            }
        });
        jPanel2.add(jBPagamentosAA);
        jBPagamentosAA.setBounds(320, 50, 105, 75);

        jDateRA1.setToolTipText("");
        jDateRA1.setEnabled(false);
        jDateRA1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDateRA1FocusLost(evt);
            }
        });
        jPanel2.add(jDateRA1);
        jDateRA1.setBounds(320, 20, 105, 20);

        jLabel12.setText("* Registros antigos");
        jLabel12.setToolTipText("Para registros do sistema antigo use a formatação yyyy/MM/dd");
        jPanel2.add(jLabel12);
        jLabel12.setBounds(320, 0, 92, 14);

        jButton24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/pagamentos.png"))); // NOI18N
        jButton24.setText("Pagamentos");
        jButton24.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton24.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton24.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButton24.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton24);
        jButton24.setBounds(440, 50, 105, 75);

        jDateFinalRA1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDateFinalRA1FocusLost(evt);
            }
        });
        jPanel2.add(jDateFinalRA1);
        jDateFinalRA1.setBounds(550, 100, 87, 20);

        jLabel13.setText("Data Final");
        jLabel13.setToolTipText("Para registros do sistema antigo use a formatação yyyy/MM/dd");
        jPanel2.add(jLabel13);
        jLabel13.setBounds(550, 83, 63, 14);

        jDateInicialRA1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDateInicialRA1FocusLost(evt);
            }
        });
        jPanel2.add(jDateInicialRA1);
        jDateInicialRA1.setBounds(550, 60, 87, 20);

        jLabel14.setText("Data Inicial");
        jLabel14.setToolTipText("Para registros do sistema antigo use a formatação yyyy/MM/dd");
        jPanel2.add(jLabel14);
        jLabel14.setBounds(550, 40, 63, 14);

        jTabbedPane1.addTab("Alunos Ativos                                                                  ", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jDateInicialRN1.setDateFormatString("yyyy/MM/dd");
        jDateInicialRN1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDateInicialRN1FocusLost(evt);
            }
        });

        jDateFinalRN1.setDateFormatString("yyyy/MM/dd");
        jDateFinalRN1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDateFinalRN1FocusLost(evt);
            }
        });

        jLabel11.setText("Data Inicial");
        jLabel11.setToolTipText("Para registros do sistema antigo use a formatação yyyy/MM/dd");

        jButton22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/pagamentos.png"))); // NOI18N
        jButton22.setText("Pagamentos");
        jButton22.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton22.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton22.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButton22.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jLabel10.setText("Data Final");
        jLabel10.setToolTipText("Para registros do sistema antigo use a formatação yyyy/MM/dd");

        jLabel9.setText("* Registros novos");
        jLabel9.setToolTipText("Para registros do sistema atual use a formatação dd/MM/yyyy");

        jDateRN1.setToolTipText("");
        jDateRN1.setDateFormatString("yyyy/MM/dd");
        jDateRN1.setEnabled(false);
        jDateRN1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDateRN1FocusLost(evt);
            }
        });

        jBPagamentosIN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/pagamentos.png"))); // NOI18N
        jBPagamentosIN.setText("Pagamentos");
        jBPagamentosIN.setToolTipText("");
        jBPagamentosIN.setBorderPainted(false);
        jBPagamentosIN.setContentAreaFilled(false);
        jBPagamentosIN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBPagamentosIN.setEnabled(false);
        jBPagamentosIN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBPagamentosIN.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBPagamentosIN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBPagamentosIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPagamentosINActionPerformed(evt);
            }
        });

        jBPagamentosIA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/pagamentos.png"))); // NOI18N
        jBPagamentosIA.setText("Pagamentos");
        jBPagamentosIA.setToolTipText("");
        jBPagamentosIA.setBorderPainted(false);
        jBPagamentosIA.setContentAreaFilled(false);
        jBPagamentosIA.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBPagamentosIA.setEnabled(false);
        jBPagamentosIA.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBPagamentosIA.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jBPagamentosIA.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBPagamentosIA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPagamentosIAActionPerformed(evt);
            }
        });

        jDateRA.setToolTipText("");
        jDateRA.setEnabled(false);
        jDateRA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDateRAFocusLost(evt);
            }
        });

        jLabel4.setText("* Registros antigos");
        jLabel4.setToolTipText("Para registros do sistema antigo use a formatação yyyy/MM/dd");

        jButton19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/pagamentos.png"))); // NOI18N
        jButton19.setText("Pagamentos");
        jButton19.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton19.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton19.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButton19.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jDateFinalRA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDateFinalRAFocusLost(evt);
            }
        });

        jLabel6.setText("Data Final");
        jLabel6.setToolTipText("Para registros do sistema antigo use a formatação yyyy/MM/dd");

        jDateInicialRA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDateInicialRAFocusLost(evt);
            }
        });

        jLabel5.setText("Data Inicial");
        jLabel5.setToolTipText("Para registros do sistema antigo use a formatação yyyy/MM/dd");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jBPagamentosIN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateInicialRN1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateFinalRN1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jDateRN1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateRA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBPagamentosIA, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateInicialRA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateFinalRA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 4, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateInicialRN1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel10)
                        .addGap(1, 1, 1)
                        .addComponent(jDateFinalRN1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateRN1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBPagamentosIN)
                            .addComponent(jButton22, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 4, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jDateRA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBPagamentosIA))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateInicialRA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(jDateFinalRA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton19))
                        .addGap(1, 1, 1)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Alunos Inativos                                                                            ", jPanel3);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel15.setText("Data Inicial");
        jLabel15.setToolTipText("Para registros do sistema antigo use a formatação yyyy/MM/dd");

        jDateInicialRA2.setEnabled(false);
        jDateInicialRA2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDateInicialRA2FocusLost(evt);
            }
        });

        jLabel16.setText("Data Final");
        jLabel16.setToolTipText("Para registros do sistema antigo use a formatação yyyy/MM/dd");

        jDateFinalRA2.setEnabled(false);
        jDateFinalRA2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDateFinalRA2FocusLost(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/VendasRelatórios.png"))); // NOI18N
        jButton1.setText("Vendas");
        jButton1.setToolTipText("Caixa");
        jButton1.setEnabled(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/ProdutosEmFaltaRelatórios.png"))); // NOI18N
        jButton2.setText("Estoque");
        jButton2.setToolTipText("Estoque");
        jButton2.setEnabled(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/em construcao.png"))); // NOI18N
        jLabel17.setToolTipText("Em desenvolvimento..");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateInicialRA2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDateFinalRA2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 287, Short.MAX_VALUE)
                .addComponent(jLabel17))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateInicialRA2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(jDateFinalRA2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel17))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Gráfico      ", jPanel4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addComponent(jSeparator1)
            .addComponent(jTabbedPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jBAlunos, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBAlunosTurma)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBTurmaAnalitico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBAlunosInativos, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBProfessores, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBFornecedores)
                        .addGap(16, 16, 16))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFTCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRBSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRBNaoSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jBEstoqueEntrada)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBEstoqueDevolucao)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBContasPagar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBContasReceber)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBContratos, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jBCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBCaixaSaidas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBAcessos)))
                        .addContainerGap())))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBAlunosTurma, jBFornecedores, jBProfessores});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBAcessos, jBCaixa, jBCaixaSaidas, jBVendas});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBEstoque, jBEstoqueDevolucao, jBEstoqueEntrada});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jFTCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRBSalvar)
                    .addComponent(jRBNaoSalvar))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBAlunosTurma, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBTurmaAnalitico, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBAlunosInativos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBAlunos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBProfessores, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jBFornecedores, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jBCaixaSaidas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBCaixa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jBAcessos, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(4, 4, 4)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jBEstoqueEntrada, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBEstoqueDevolucao, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jBEstoque, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jBContratos)
                    .addComponent(jBContasReceber, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBContasPagar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBContasPagar, jBContasReceber, jBContratos, jBEstoque, jBEstoqueDevolucao, jBEstoqueEntrada});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBAlunos, jBAlunosInativos, jBAlunosTurma, jBFornecedores, jBProfessores, jBTurmaAnalitico});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBAcessos, jBCaixa, jBCaixaSaidas, jBVendas});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBAlunosTurmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAlunosTurmaActionPerformed
        Relatorios.this.dispose();
        try {
            Connection con = new Conexao().getConnection();
            HashMap parametros = new HashMap();


            JasperPrint jp = JasperFillManager.fillReport("./relatorios/AlunoTurma.jasper", parametros, con);
            if (jRBSalvar.isSelected()) {
                JasperExportManager.exportReportToPdfFile(jp, "C:/Aluno Turma.pdf");
            }
            JasperViewer jrv = new JasperViewer(jp, false);
            jrv.setVisible(true);
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jBAlunosTurmaActionPerformed

    private void jBTurmaAnaliticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTurmaAnaliticoActionPerformed
        Relatorios.this.dispose();
        if (!jFTCPF.getText().equals("   .   .   -  ")) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                //String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateChooser1.getDate());
                parametros.put("VALOR", jFTCPF.getText());


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/AlunoTurmaAnalitico.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Aluno Turma Analítico - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/AlunoTurmaAnalitico2.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Aluno Turma Analítico - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jBTurmaAnaliticoActionPerformed

    private void jBContasPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBContasPagarActionPerformed
        Relatorios.this.dispose();
        try {
            Connection con = new Conexao().getConnection();
            HashMap parametros = new HashMap();


            JasperPrint jp = JasperFillManager.fillReport("./relatorios/ContasPagar.jasper", parametros, con);
            if (jRBSalvar.isSelected()) {
                JasperExportManager.exportReportToPdfFile(jp, "C:/ Contas à Pagar.pdf");
            }
            JasperViewer jrv = new JasperViewer(jp, false);
            jrv.setVisible(true);
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jBContasPagarActionPerformed

    private void jBContasReceberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBContasReceberActionPerformed
        Relatorios.this.dispose();
        try {
            Connection con = new Conexao().getConnection();
            HashMap parametros = new HashMap();


            JasperPrint jp = JasperFillManager.fillReport("./relatorios/ContasReceber.jasper", parametros, con);
            if (jRBSalvar.isSelected()) {
                JasperExportManager.exportReportToPdfFile(jp, "C:/Contas Receber.pdf");
            }
            JasperViewer jrv = new JasperViewer(jp, false);
            jrv.setVisible(true);
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jBContasReceberActionPerformed

    private void jBEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEstoqueActionPerformed
        Relatorios.this.dispose();
        try {
            Connection con = new Conexao().getConnection();
            HashMap parametros = new HashMap();


            JasperPrint jp = JasperFillManager.fillReport("./relatorios/MaterialNegativo.jasper", parametros, con);
            if (jRBSalvar.isSelected()) {
                JasperExportManager.exportReportToPdfFile(jp, "C:/Material.pdf");
            }
            JasperViewer jrv = new JasperViewer(jp, false);
            jrv.setVisible(true);
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jBEstoqueActionPerformed

    private void jBCaixaSaidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCaixaSaidasActionPerformed
        Relatorios.this.dispose();

        if (jDateChooser1.getDate() != null) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateChooser1.getDate());
                parametros.put("VALOR", formatador);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/CaixaSaida.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Caixa Diário Saída - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/CaixaSaida2.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Caixa Diário Saída - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jBCaixaSaidasActionPerformed

    private void jBEstoqueEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEstoqueEntradaActionPerformed
        Relatorios.this.dispose();
        try {
            Connection con = new Conexao().getConnection();
            HashMap parametros = new HashMap();


            JasperPrint jp = JasperFillManager.fillReport("./relatorios/MaterialEntrada.jasper", parametros, con);
            if (jRBSalvar.isSelected()) {
                JasperExportManager.exportReportToPdfFile(jp, "C:/Entrada de Materiais Entrada.pdf");
            }
            JasperViewer jrv = new JasperViewer(jp, false);
            jrv.setVisible(true);
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jBEstoqueEntradaActionPerformed

    private void jBEstoqueDevolucaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEstoqueDevolucaoActionPerformed
        Relatorios.this.dispose();
        try {
            Connection con = new Conexao().getConnection();
            HashMap parametros = new HashMap();


            JasperPrint jp = JasperFillManager.fillReport("./relatorios/MaterialSaida.jasper", parametros, con);
            if (jRBSalvar.isSelected()) {
                JasperExportManager.exportReportToPdfFile(jp, "C:/Saída de Materiais.pdf");
            }
            JasperViewer jrv = new JasperViewer(jp, false);
            jrv.setVisible(true);
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jBEstoqueDevolucaoActionPerformed

    private void jBVendasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVendasActionPerformed
        Relatorios.this.dispose();

        if (jDateChooser1.getDate() != null) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateChooser1.getDate());
                parametros.put("VALOR", formatador);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/Venda.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Vendas - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/Venda2.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Vendas - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jBVendasActionPerformed

    private void jBAlunosInativosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAlunosInativosActionPerformed
        Relatorios.this.dispose();

        selection = JOptionPane.showConfirmDialog(this,
                "Há duas opções de ralatórios sendo: Alunos Inativos por Turma Analítico\n"
                + "ou Alunos Inativos. \n"
                + "Deseja carregar Alunos Inativos?",
                "", JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (selection == JOptionPane.OK_OPTION) {

            if (!jFTCPF.getText().equals("   .   .   -  ")) {
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();
                    parametros.put("VALOR", jFTCPF.getText());


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/AlunosInativos.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Alunos Inativos - Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }


            } else {
                try {

                    ClientesDAO dao = new ClientesDAO();
                    selection = JOptionPane.showConfirmDialog(this,
                            "Deseja carregar todos os dados?\n"
                            + "Consta na base de dados: \n" + dao.gerarCodigoClienteExcluido() + ""
                            + " último registro.",
                            "", JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.WARNING_MESSAGE);
                    dao.desconectar();
                } catch (Exception ex) {
                    Logger.getLogger(Relatorios.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (selection == JOptionPane.OK_OPTION) {
                    try {
                        Connection con = new Conexao().getConnection();
                        HashMap parametros = new HashMap();


                        JasperPrint jp = JasperFillManager.fillReport("./relatorios/AlunosInativos2.jasper", parametros, con);
                        if (jRBSalvar.isSelected()) {
                            JasperExportManager.exportReportToPdfFile(jp, "C:/Alunos Inativos - Busca CPF- Seeds.pdf");
                        }
                        JasperViewer jrv = new JasperViewer(jp, false);
                        jrv.setVisible(true);
                        con.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    new Relatorios(null, rootPaneCheckingEnabled).setVisible(true);
                }
            }



        } else {
            if (!jFTCPF.getText().equals("   .   .   -  ")) {
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();
                    parametros.put("VALOR", jFTCPF.getText());


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/AlunoTurmaAnaliticoInativos.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Alunos Inativos - Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/AlunoTurmaAnaliticoInativos2.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Alunos Inativos - Busca CPF- Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

    }//GEN-LAST:event_jBAlunosInativosActionPerformed

    private void jBCaixaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCaixaActionPerformed
        Relatorios.this.dispose();

        if (jDateChooser1.getDate() != null) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateChooser1.getDate());
                parametros.put("VALOR", formatador);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/Caixa.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Caixa Diário Entrada - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/Caixa2.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Caixa Diário Entrada - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jBCaixaActionPerformed

    private void jBContratosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBContratosActionPerformed
        Relatorios.this.dispose();
        try {
            Connection con = new Conexao().getConnection();
            HashMap parametros = new HashMap();


            JasperPrint jp = JasperFillManager.fillReport("./relatorios/contratos.jasper", parametros, con);
            if (jRBSalvar.isSelected()) {
                JasperExportManager.exportReportToPdfFile(jp, "C:/Contratos.pdf");
            }
            JasperViewer jrv = new JasperViewer(jp, false);
            jrv.setVisible(true);
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jBContratosActionPerformed

    private void jBPagamentosANActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPagamentosANActionPerformed
        Relatorios.this.dispose();
        if (jDateRA.getDate() != null) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateRA.getDate());
                parametros.put("VALOR", formatador);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentes.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateRA.getDate());
                parametros.put("VALOR", formatador);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentes1.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Pendentes- Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            if (jDateRN.getDate() != null) {
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();
                    String formatador = new SimpleDateFormat("yyyy/MM/dd").format(jDateRN.getDate());
                    parametros.put("VALOR", formatador);


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentes.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();
                    String formatador = new SimpleDateFormat("yyyy/MM/dd").format(jDateRN.getDate());
                    parametros.put("VALOR", formatador);


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentes1.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Pendentes- Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                try {

                    ContasRDAO dao = new ContasRDAO();

                    //--------///------///----ContasReceberContratos conta = new ContasReceberContratos(null);
                    selection = JOptionPane.showConfirmDialog(this,
                            "Deseja carregar todos os dados?\n"
                            + "Consta na base de dados: \n" + dao.gerarCodigoContaR() + ""
                            + " registros.",
                            "", JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.WARNING_MESSAGE);
                    dao.desconectar();
                } catch (Exception ex) {
                    Logger.getLogger(Relatorios.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (selection == JOptionPane.OK_OPTION) {
                    try {
                        Connection con = new Conexao().getConnection();
                        HashMap parametros = new HashMap();


                        JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentes2.jasper", parametros, con);
                        if (jRBSalvar.isSelected()) {
                            JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Seeds.pdf");
                        }
                        JasperViewer jrv = new JasperViewer(jp, false);
                        jrv.setVisible(true);
                        con.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        Connection con = new Conexao().getConnection();
                        HashMap parametros = new HashMap();


                        JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentes21.jasper", parametros, con);
                        if (jRBSalvar.isSelected()) {
                            JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Pendentes- Seeds.pdf");
                        }
                        JasperViewer jrv = new JasperViewer(jp, false);
                        jrv.setVisible(true);
                        con.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    new Relatorios(null, rootPaneCheckingEnabled).setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_jBPagamentosANActionPerformed

    private void jBAlunosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAlunosActionPerformed
        Relatorios.this.dispose();
        if (!jFTCPF.getText().equals("   .   .   -  ")) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                //String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateChooser1.getDate());
                parametros.put("VALOR", jFTCPF.getText());


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/Alunos.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Todos os Alunos - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/Alunos2.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Todos os Alunos - Busca CPF- Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jBAlunosActionPerformed

    private void jBProfessoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProfessoresActionPerformed
        Relatorios.this.dispose();
        if (!jFTCPF.getText().equals("   .   .   -  ")) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                //String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateChooser1.getDate());
                parametros.put("VALOR", jFTCPF.getText());


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/Professores.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Todos os Professores - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/Professores2.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Todos os Professores - Busca CPF- Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jBProfessoresActionPerformed

    private void jBFornecedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFornecedoresActionPerformed
        Relatorios.this.dispose();
        if (!jFTCPF.getText().equals("   .   .   -  ")) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                //String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateChooser1.getDate());
                parametros.put("VALOR", jFTCPF.getText());


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/Fornecedores.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Todos os Fornecedores - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/Fornecedores2.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Todos os Fornecedores - Busca CPF- Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jBFornecedoresActionPerformed

    private void jBAcessosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAcessosActionPerformed
        Relatorios.this.dispose();

        if (jDateChooser1.getDate() != null) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateChooser1.getDate());
                parametros.put("VALOR", formatador);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/Acesso.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Acesso - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {

            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/Acesso2.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Acesso - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jBAcessosActionPerformed

    private void jBPagamentosIAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPagamentosIAActionPerformed

        Relatorios.this.dispose();
        if (jDateRA.getDate() != null) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateRA.getDate());
                parametros.put("VALOR", formatador);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativo.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Registro antigos - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateRA.getDate());
                parametros.put("VALOR", formatador);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativo1.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Pagos - Registro antigos - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            if (jDateRN.getDate() != null) {
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();
                    String formatador = new SimpleDateFormat("yyyy/MM/dd").format(jDateRN.getDate());
                    parametros.put("VALOR", formatador);


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativo.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Registros antigos - Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();
                    String formatador = new SimpleDateFormat("yyyy/MM/dd").format(jDateRN.getDate());
                    parametros.put("VALOR", formatador);


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativo1.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Pagos - Registros antigos - Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                try {

                    ContasRDAO dao = new ContasRDAO();


                    selection = JOptionPane.showConfirmDialog(this,
                            "Deseja carregar todos os dados?\n"
                            + "Consta na base de dados: \n" + dao.gerarCodigoContaR() + ""
                            + " registros.",
                            "", JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.WARNING_MESSAGE);

                    dao.desconectar();
                } catch (Exception ex) {
                    Logger.getLogger(Relatorios.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (selection == JOptionPane.OK_OPTION) {
                    try {
                        Connection con = new Conexao().getConnection();
                        HashMap parametros = new HashMap();


                        JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativo2.jasper", parametros, con);
                        if (jRBSalvar.isSelected()) {
                            JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Registros antigos - Seeds.pdf");
                        }
                        JasperViewer jrv = new JasperViewer(jp, false);
                        jrv.setVisible(true);
                        con.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    new Relatorios(null, rootPaneCheckingEnabled).setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_jBPagamentosIAActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed

        Relatorios.this.dispose();
        if (jDateInicialRA.getDate() != null && jDateFinalRA.getDate() != null) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateInicialRA.getDate());
                String formatadorF = new SimpleDateFormat("dd/MM/yyyy").format(jDateFinalRA.getDate());
                parametros.put("VALOR", formatador);
                parametros.put("VALOR_FINAL", formatadorF);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativoIF.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - DATA INÍCIO - FIM - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateInicialRA.getDate());
                String formatadorF = new SimpleDateFormat("dd/MM/yyyy").format(jDateFinalRA.getDate());
                parametros.put("VALOR", formatador);
                parametros.put("VALOR_FINAL", formatadorF);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativoIF1.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Pendentes - DATA INÍCIO - FIM - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }

        } else {
            try {

                ContasRDAO dao = new ContasRDAO();


                selection = JOptionPane.showConfirmDialog(this,
                        "Deseja carregar todos os dados?\n"
                        + "Consta na base de dados: \n" + dao.gerarCodigoContaR() + ""
                        + " registros.",
                        "", JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.WARNING_MESSAGE);

                dao.desconectar();
            } catch (Exception ex) {
                Logger.getLogger(Relatorios.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (selection == JOptionPane.OK_OPTION) {
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativo2.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - data início - fim - Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativo21.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Pendentes - data início - fim - Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                new Relatorios(null, rootPaneCheckingEnabled).setVisible(true);
            }

        }
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        Relatorios.this.dispose();
        if (jDateInicialRN.getDate() != null && jDateFinalRN.getDate() != null) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("yyyy/MM/dd").format(jDateInicialRN.getDate());
                String formatadorF = new SimpleDateFormat("yyyy/MM/dd").format(jDateFinalRN.getDate());
                parametros.put("VALOR", formatador);
                parametros.put("VALOR_FINAL", formatadorF);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesIF.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("yyyy/MM/dd").format(jDateInicialRN.getDate());
                String formatadorF = new SimpleDateFormat("yyyy/MM/dd").format(jDateFinalRN.getDate());
                parametros.put("VALOR", formatador);
                parametros.put("VALOR_FINAL", formatadorF);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesIF1.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {

            try {

                ContasRDAO dao = new ContasRDAO();


                selection = JOptionPane.showConfirmDialog(this,
                        "Deseja carregar todos os dados?\n"
                        + "Consta na base de dados: \n" + dao.gerarCodigoContaR() + ""
                        + " registros.",
                        "", JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.WARNING_MESSAGE);
                dao.desconectar();
            } catch (Exception ex) {
                Logger.getLogger(Relatorios.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (selection == JOptionPane.OK_OPTION) {
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentes2.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentes21.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Pendentes- Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                new Relatorios(null, rootPaneCheckingEnabled).setVisible(true);
            }
        }

    }//GEN-LAST:event_jButton20ActionPerformed

    private void jDateInicialRAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateInicialRAFocusLost
        jDateFinalRA.requestFocus();
    }//GEN-LAST:event_jDateInicialRAFocusLost

    private void jDateFinalRAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateFinalRAFocusLost
        jButton19.requestFocus();
    }//GEN-LAST:event_jDateFinalRAFocusLost

    private void jDateRAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateRAFocusLost
        jBPagamentosIA.requestFocus();
    }//GEN-LAST:event_jDateRAFocusLost

    private void jDateInicialRNFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateInicialRNFocusLost
        jDateFinalRN.requestFocus();
    }//GEN-LAST:event_jDateInicialRNFocusLost

    private void jDateFinalRNFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateFinalRNFocusLost
        jButton20.requestFocus();
    }//GEN-LAST:event_jDateFinalRNFocusLost

    private void jDateRNFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateRNFocusLost
        jBPagamentosAN.requestFocus();
    }//GEN-LAST:event_jDateRNFocusLost

    private void jDateRN1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateRN1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jDateRN1FocusLost

    private void jBPagamentosINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPagamentosINActionPerformed
        Relatorios.this.dispose();
        if (jDateRA.getDate() != null) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateRA.getDate());
                parametros.put("VALOR", formatador);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesX.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Alunos Inativos- Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateRA.getDate());
                parametros.put("VALOR", formatador);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentes1X.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Pendentes Alunos Inativos- Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            if (jDateRN.getDate() != null) {
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();
                    String formatador = new SimpleDateFormat("yyyy/MM/dd").format(jDateRN.getDate());
                    parametros.put("VALOR", formatador);


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesX.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();
                    String formatador = new SimpleDateFormat("yyyy/MM/dd").format(jDateRN.getDate());
                    parametros.put("VALOR", formatador);


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentes1X.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Pendentes- Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                try {

                    ContasRDAO dao = new ContasRDAO();

                    //--------///------///----ContasReceberContratos conta = new ContasReceberContratos(null);
                    selection = JOptionPane.showConfirmDialog(this,
                            "Deseja carregar todos os dados?\n"
                            + "Consta na base de dados: \n" + dao.gerarCodigoContaR() + ""
                            + " registros.",
                            "", JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.WARNING_MESSAGE);
                    dao.desconectar();
                } catch (Exception ex) {
                    Logger.getLogger(Relatorios.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (selection == JOptionPane.OK_OPTION) {
                    try {
                        Connection con = new Conexao().getConnection();
                        HashMap parametros = new HashMap();


                        JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentes2X.jasper", parametros, con);
                        if (jRBSalvar.isSelected()) {
                            JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Seeds.pdf");
                        }
                        JasperViewer jrv = new JasperViewer(jp, false);
                        jrv.setVisible(true);
                        con.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        Connection con = new Conexao().getConnection();
                        HashMap parametros = new HashMap();


                        JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentes21X.jasper", parametros, con);
                        if (jRBSalvar.isSelected()) {
                            JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Pendentes- Seeds.pdf");
                        }
                        JasperViewer jrv = new JasperViewer(jp, false);
                        jrv.setVisible(true);
                        con.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    new Relatorios(null, rootPaneCheckingEnabled).setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_jBPagamentosINActionPerformed

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        Relatorios.this.dispose();
        if (jDateInicialRN1.getDate() != null && jDateFinalRN1.getDate() != null) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("yyyy/MM/dd").format(jDateInicialRN1.getDate());
                String formatadorF = new SimpleDateFormat("yyyy/MM/dd").format(jDateFinalRN1.getDate());
                parametros.put("VALOR", formatador);
                parametros.put("VALOR_FINAL", formatadorF);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesIFX.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("yyyy/MM/dd").format(jDateInicialRN1.getDate());
                String formatadorF = new SimpleDateFormat("yyyy/MM/dd").format(jDateFinalRN1.getDate());
                parametros.put("VALOR", formatador);
                parametros.put("VALOR_FINAL", formatadorF);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesIF1X.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {

            try {

                ContasRDAO dao = new ContasRDAO();


                selection = JOptionPane.showConfirmDialog(this,
                        "Deseja carregar todos dados?\n"
                        + "Consta na base de dados: \n" + dao.gerarCodigoContaR() + ""
                        + " registros.",
                        "", JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.WARNING_MESSAGE);
                dao.desconectar();
            } catch (Exception ex) {
                Logger.getLogger(Relatorios.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (selection == JOptionPane.OK_OPTION) {
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentes2X Alunos Inativos.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentes21X.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Pendentes Alunos Inativos- Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                new Relatorios(null, rootPaneCheckingEnabled).setVisible(true);
            }
        }

    }//GEN-LAST:event_jButton22ActionPerformed

    private void jDateFinalRN1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateFinalRN1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jDateFinalRN1FocusLost

    private void jDateInicialRN1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateInicialRN1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jDateInicialRN1FocusLost

    private void jBPagamentosAAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPagamentosAAActionPerformed

        Relatorios.this.dispose();
        if (jDateRA1.getDate() != null) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateRA1.getDate());
                parametros.put("VALOR", formatador);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativoX.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Registro antigos - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateRA1.getDate());
                parametros.put("VALOR", formatador);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativo1X.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Pagos - Registro antigos - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            if (jDateRN1.getDate() != null) {
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();
                    String formatador = new SimpleDateFormat("yyyy/MM/dd").format(jDateRN1.getDate());
                    parametros.put("VALOR", formatador);


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativoX.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Registros antigos - Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();
                    String formatador = new SimpleDateFormat("yyyy/MM/dd").format(jDateRN1.getDate());
                    parametros.put("VALOR", formatador);


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativo1X.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Pagos - Registros antigos - Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                try {

                    ContasRDAO dao = new ContasRDAO();


                    selection = JOptionPane.showConfirmDialog(this,
                            "Deseja carregar todos os dados?\n"
                            + "Consta na base de dados: \n" + dao.gerarCodigoContaR() + ""
                            + " registros.",
                            "", JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.WARNING_MESSAGE);

                    dao.desconectar();
                } catch (Exception ex) {
                    Logger.getLogger(Relatorios.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (selection == JOptionPane.OK_OPTION) {
                    try {
                        Connection con = new Conexao().getConnection();
                        HashMap parametros = new HashMap();


                        JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativo2X.jasper", parametros, con);
                        if (jRBSalvar.isSelected()) {
                            JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - Registros antigos - Seeds.pdf");
                        }
                        JasperViewer jrv = new JasperViewer(jp, false);
                        jrv.setVisible(true);
                        con.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    new Relatorios(null, rootPaneCheckingEnabled).setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_jBPagamentosAAActionPerformed

    private void jDateRA1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateRA1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jDateRA1FocusLost

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        Relatorios.this.dispose();
        if (jDateInicialRA1.getDate() != null && jDateFinalRA1.getDate() != null) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateInicialRA1.getDate());
                String formatadorF = new SimpleDateFormat("dd/MM/yyyy").format(jDateFinalRA1.getDate());
                parametros.put("VALOR", formatador);
                parametros.put("VALOR_FINAL", formatadorF);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativoIFX.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - DATA INÍCIO - FIM - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateInicialRA1.getDate());
                String formatadorF = new SimpleDateFormat("dd/MM/yyyy").format(jDateFinalRA1.getDate());
                parametros.put("VALOR", formatador);
                parametros.put("VALOR_FINAL", formatadorF);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativoIF1X.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Pendentes - DATA INÍCIO - FIM - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }

        } else {
            try {

                ContasRDAO dao = new ContasRDAO();


                selection = JOptionPane.showConfirmDialog(this,
                        "Deseja carregar todos dados?\n"
                        + "Consta na base de dados: \n" + dao.gerarCodigoContaR() + ""
                        + " registros.",
                        "", JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.WARNING_MESSAGE);

                dao.desconectar();
            } catch (Exception ex) {
                Logger.getLogger(Relatorios.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (selection == JOptionPane.OK_OPTION) {
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativo2X.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos - data início - fim - Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    Connection con = new Conexao().getConnection();
                    HashMap parametros = new HashMap();


                    JasperPrint jp = JasperFillManager.fillReport("./relatorios/PagamentosPendentesInativo21X.jasper", parametros, con);
                    if (jRBSalvar.isSelected()) {
                        JasperExportManager.exportReportToPdfFile(jp, "C:/Contas a receber Contratos Pendentes - data início - fim - Seeds.pdf");
                    }
                    JasperViewer jrv = new JasperViewer(jp, false);
                    jrv.setVisible(true);
                    con.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                new Relatorios(null, rootPaneCheckingEnabled).setVisible(true);
            }

        }
    }//GEN-LAST:event_jButton24ActionPerformed

    private void jDateFinalRA1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateFinalRA1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jDateFinalRA1FocusLost

    private void jDateInicialRA1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateInicialRA1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jDateInicialRA1FocusLost

    private void jDateInicialRA2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateInicialRA2FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jDateInicialRA2FocusLost

    private void jDateFinalRA2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateFinalRA2FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jDateFinalRA2FocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Relatorios.this.dispose();
        if (jDateInicialRA2.getDate() != null && jDateFinalRA2.getDate() != null) {
            try {
                Connection con = new Conexao().getConnection();
                HashMap parametros = new HashMap();
                String formatador = new SimpleDateFormat("dd/MM/yyyy").format(jDateInicialRA2.getDate());
                String formatadorF = new SimpleDateFormat("dd/MM/yyyy").format(jDateFinalRA2.getDate());
                parametros.put("VALOR", formatador);
                parametros.put("VALOR_FINAL", formatadorF);


                JasperPrint jp = JasperFillManager.fillReport("./relatorios/VendasGraf.jasper", parametros, con);
                if (jRBSalvar.isSelected()) {
                    JasperExportManager.exportReportToPdfFile(jp, "C:/Caixa - DATA INÍCIO - FIM - Graf - Seeds.pdf");
                }
                JasperViewer jrv = new JasperViewer(jp, false);
                jrv.setVisible(true);
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Relatorios.this.dispose();
        try {
            Connection con = new Conexao().getConnection();
            HashMap parametros = new HashMap();

            JasperPrint jp = JasperFillManager.fillReport("./relatorios/EstoqueGraf.jasper", parametros, con);
            if (jRBSalvar.isSelected()) {
                JasperExportManager.exportReportToPdfFile(jp, "C:/Material Graf.pdf");
            }
            // JasperViewer jrv = new JasperViewer(jp, false);
            JasperViewer jrv = new JasperViewer(jp);
            jrv.setVisible(true);
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Relatorios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Relatorios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Relatorios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Relatorios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Relatorios dialog = new Relatorios(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jBAcessos;
    private javax.swing.JButton jBAlunos;
    private javax.swing.JButton jBAlunosInativos;
    private javax.swing.JButton jBAlunosTurma;
    private javax.swing.JButton jBCaixa;
    private javax.swing.JButton jBCaixaSaidas;
    private javax.swing.JButton jBContasPagar;
    private javax.swing.JButton jBContasReceber;
    private javax.swing.JButton jBContratos;
    private javax.swing.JButton jBEstoque;
    private javax.swing.JButton jBEstoqueDevolucao;
    private javax.swing.JButton jBEstoqueEntrada;
    private javax.swing.JButton jBFornecedores;
    private javax.swing.JButton jBPagamentosAA;
    private javax.swing.JButton jBPagamentosAN;
    private javax.swing.JButton jBPagamentosIA;
    private javax.swing.JButton jBPagamentosIN;
    private javax.swing.JButton jBProfessores;
    private javax.swing.JButton jBTurmaAnalitico;
    private javax.swing.JButton jBVendas;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton24;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateFinalRA;
    private com.toedter.calendar.JDateChooser jDateFinalRA1;
    private com.toedter.calendar.JDateChooser jDateFinalRA2;
    private com.toedter.calendar.JDateChooser jDateFinalRN;
    private com.toedter.calendar.JDateChooser jDateFinalRN1;
    private com.toedter.calendar.JDateChooser jDateInicialRA;
    private com.toedter.calendar.JDateChooser jDateInicialRA1;
    private com.toedter.calendar.JDateChooser jDateInicialRA2;
    private com.toedter.calendar.JDateChooser jDateInicialRN;
    private com.toedter.calendar.JDateChooser jDateInicialRN1;
    private com.toedter.calendar.JDateChooser jDateRA;
    private com.toedter.calendar.JDateChooser jDateRA1;
    private com.toedter.calendar.JDateChooser jDateRN;
    private com.toedter.calendar.JDateChooser jDateRN1;
    private javax.swing.JFormattedTextField jFTCPF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRBNaoSalvar;
    private javax.swing.JRadioButton jRBSalvar;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
