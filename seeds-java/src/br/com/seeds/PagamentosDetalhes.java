/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Clientes.java
 *
 * Created on 02/09/2004, 01:18:18
 */
package br.com.seeds;

import Classes.Cliente;
import ClassesDAO.*;
import Excessoes.BancoException;
import java.awt.event.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Guilherme Augusto
 */
public class PagamentosDetalhes extends javax.swing.JFrame {

    StringBuffer nome = new StringBuffer();
    StringBuffer nomes = new StringBuffer();
    String s, f;
    int apagar = 0;
    int codigoUsuarioLogado = 0;
    public ClientesDAO dao;
    public Cliente cliente = new Cliente();
    boolean VerificaFinal = false;
    boolean aberto = false;

    /**
     * Creates new form Clientes
     */
    public PagamentosDetalhes() throws BancoException, ParseException, SQLException {
        initComponents();
        setLocationRelativeTo(null);
        dao = new ClientesDAO();

        //txtNome.requestFocus();
        btnOk.requestFocus();
       
        txtNome.setDocument(new LimiteCampos.FixedLengthDocument(100));
        txtCodigo.setDocument(new LimiteCampos.FixedLengthDocument(11));
        txtCodigoLocalidade.setDocument(new LimiteCampos.FixedLengthDocument(11));
        txtCodigo.setDocument(new OnlyNumberField(11));

        try {
            LocalidadeDAO dao = new LocalidadeDAO();
            txtCodigoLocalidade.setText(String.valueOf(dao.gerarCodigoLocalidade() - 1));
            dao.desconectar();
        } catch (BancoException f) {
            f.printStackTrace();
        }

        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                try {
                    try {
                        try {

                            Fechando();

                        } catch (ParseException ex) {
                            Logger.getLogger(BuscarSubprodutosCaixaVenda.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(BuscarSubprodutosCaixaVenda.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (BancoException ex) {
                    Logger.getLogger(BuscarSubprodutosCaixaVenda.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    public void Fechando() throws BancoException, SQLException, ParseException {
        this.dispose();
    }

    public void FechandoAbrindoMatricula() throws BancoException, SQLException, ParseException {
        this.dispose();
        new Matriculas().setVisible(true);
    }
    String parametroPesquisa = "";
    String campo;
    private String nomeCliente = "teste não vai aparecer";
    private int codigoCliente;

    public int getCodigoCliente() {
        return codigoCliente;
    }

    public void setCodigoCliente(int codigoCliente) {
        this.codigoCliente = codigoCliente;
    }

    public void setAcao(ActionListener parametro) {
        btnOk.addActionListener(parametro);
    }

    public void GravarDadosContrato() throws IOException {

        if (nomeCliente.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Não foi possível transferir os dados.\n"
                    + "Código nulo.",
                    "Atualizando",
                    JOptionPane.ERROR_MESSAGE);
            this.dispose();


        } else {
            FileWriter arq = new FileWriter("../seeds-java/contratospagamentos.txt");
            PrintWriter gravarArq = new PrintWriter(arq);
            gravarArq.printf(nomeCliente);
            arq.close();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        PainelFisico = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        txtCodigoLocalidade = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Buscar o cliente");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        PainelFisico.setBackground(new java.awt.Color(255, 255, 255));
        PainelFisico.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(215, 214, 214)));
        PainelFisico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PainelFisicoMouseEntered(evt);
            }
        });

        btnOk.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/buscar.png"))); // NOI18N
        btnOk.setText("Ativos");
        btnOk.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jPanel2.setForeground(new java.awt.Color(102, 102, 102));

        jLabel38.setText("Nome *");

        txtNome.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeActionPerformed(evt);
            }
        });
        txtNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNomeKeyPressed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/buscar.png"))); // NOI18N
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setFocusable(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Código");

        txtCodigo.setEditable(false);
        txtCodigo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCodigo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodigoFocusLost(evt);
            }
        });

        txtCodigoLocalidade.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCodigoLocalidade.setToolTipText("Código da Localidade/Prédio");

        jLabel6.setText("/");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCodigoLocalidade, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 447, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtCodigoLocalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(27, 27, 27))
        );

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/buscar.png"))); // NOI18N
        jButton3.setText("Inativos");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/imagens/entrar.png"))); // NOI18N
        jButton1.setText("Okay!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PainelFisicoLayout = new javax.swing.GroupLayout(PainelFisico);
        PainelFisico.setLayout(PainelFisicoLayout);
        PainelFisicoLayout.setHorizontalGroup(
            PainelFisicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelFisicoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PainelFisicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PainelFisicoLayout.createSequentialGroup()
                        .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PainelFisicoLayout.setVerticalGroup(
            PainelFisicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelFisicoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                .addGroup(PainelFisicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(jButton3)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PainelFisico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PainelFisico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
    txtNome.requestFocus();
    try {
        if (dao.gerarCodigoCliente() == 1) {
            JOptionPane.showMessageDialog(this,
                    "O sistema não possuí um cliente cadastrado.",
                    "seeds",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {

            final BuscarClientes pesq = new BuscarClientes("Clientes");
            pesq.setVisible(true);

            ActionListener acaoOk = new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    StringBuffer codigoAluno = new StringBuffer();
                    int codigoCliente = 0;
                    codigoCliente = pesq.getCodigoCliente();
                    codigoAluno.append(codigoCliente);

                    apagar = nomes.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                    nomes.delete(0, apagar);
                    nomes.append(txtCodigoLocalidade.getText());
                    try {
                        ClientesDAO dao = new ClientesDAO();
                        cliente = dao.carregarClientePeloCodigo(codigoAluno, nomes);
                        txtCodigo.setText(String.valueOf(cliente.getCodigo()));
                        txtNome.setText(cliente.getNome());
                        if (txtNome.getText().equals("nulo")) {
                            JOptionPane.showMessageDialog(rootPane,
                                    "O cliente informado não consta no banco!\n"
                                    + "Verifique se o código do Local: " + txtCodigoLocalidade.getText() + " é \n"
                                    + "o mesmo do Aluno selecionado.",
                                    "Seeds", JOptionPane.ERROR_MESSAGE);
                            txtCodigoLocalidade.requestFocus();
                        } else {
                        }
                        cliente = null;
                        dao.desconectar();
                    } catch (BancoException b) {
                        JOptionPane.showMessageDialog(null, e);
                    }
                    pesq.dispose();
                }
            };
            pesq.setAcao(acaoOk);
        }
    } catch (BancoException f) {
        f.printStackTrace();
    }

}//GEN-LAST:event_btnOkActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    //Já que eu salvo os dados com a função Trin() devo então facilitar a busca por nome
    //Removendo os espaços desnecessários; assim melhoro a resposta a essa busca
    txtNome.setText(txtNome.getText().trim());

    apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
    nome.delete(0, apagar);
    nome.append(txtNome.getText());
    try {
        cliente = dao.carregarCliente(nome);
        if (cliente.getNome().equals("nulo")) {
            JOptionPane.showMessageDialog(rootPane, "O Cliente informado não consta no banco!");
        } else {
            txtCodigo.setText(String.valueOf(cliente.getCodigo()));
            txtNome.setText(cliente.getNome());
            if (!txtCodigo.getText().equals("")) {
                nomeCliente = txtCodigo.getText();
                //contratoCliente = masterTable.getValueAt(linha, 0).toString();
                try {
                    GravarDadosContrato();
                } catch (IOException ex) {
                    Logger.getLogger(BuscarClientesContratosExcluir.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    new PagamentosDetalhesContrato().setVisible(true);
                } catch (BancoException ex) {
                    Logger.getLogger(PagamentosDetalhes.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(PagamentosDetalhes.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {
                    Logger.getLogger(PagamentosDetalhes.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.dispose();
            }
        }
        cliente = null;
    } catch (BancoException e) {
        e.printStackTrace();
    }
}//GEN-LAST:event_jButton2ActionPerformed

    private void txtNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeActionPerformed

    private void txtCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodigoFocusLost
        if (txtCodigo.getText().equals("")) {
            //SubProdutos clientes = new SubProdutos();
            try {
                ClientesDAO dao = new ClientesDAO();
                apagar = dao.gerarCodigoCliente();
                if (apagar > dao.gerarCodigoClienteExcluido()) {
                    txtCodigo.setText("" + apagar);
                } else {
                    txtCodigo.setText("" + dao.gerarCodigoClienteExcluido());
                }
                apagar = 0;
                dao.desconectar();
            } catch (BancoException f) {
                f.printStackTrace();
            }
        }
        txtCodigo.setText(txtCodigo.getText().trim());
        apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
        nome.delete(0, apagar);
        nome.append(txtCodigo.getText());
        apagar = nomes.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
        nomes.delete(0, apagar);
        nomes.append(txtCodigoLocalidade.getText());
        //String testNomeCase = txtNome.getText();
        Cliente cliente = new Cliente();
        try {
            ClientesDAO dao = new ClientesDAO(); // estou instanciando a conexão
            cliente = dao.carregarClientePeloCodigo(nome, nomes);
            if (cliente.getNome().equals("nulo")) {
                //JOptionPane.showMessageDialog(rootPane, "O Produto informado não consta no banco!");
            } else {
                int selection = JOptionPane.showConfirmDialog(this,
                        "O Cliente informado consta no banco!\n"
                        + "Deseja carregar os dados do cliente?",
                        "seeds", JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE);
                if (selection == JOptionPane.OK_OPTION) {
                    txtCodigo.setText(String.valueOf(cliente.getCodigo()));
                    txtNome.setText(cliente.getNome());

                    apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                    nome.delete(0, apagar);
                    txtNome.requestFocus();
                } else {
                    apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                    nome.delete(0, apagar);
                    try {
                        apagar = dao.gerarCodigoCliente();
                        if (apagar > dao.gerarCodigoClienteExcluido()) {
                            txtCodigo.setText("" + apagar);
                        } else {
                            txtCodigo.setText("" + dao.gerarCodigoClienteExcluido());
                        }
                        apagar = 0;
                        cliente = null;
                    } catch (BancoException f) {
                        f.printStackTrace();
                    }
                }
            }
            dao.desconectar();
        } catch (BancoException e) {
            e.printStackTrace();
        }
        apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
        nome.delete(0, apagar);
    }//GEN-LAST:event_txtCodigoFocusLost

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        txtNome.requestFocus();
        try {
            if (dao.gerarCodigoClienteExcluido() == 1) {
                JOptionPane.showMessageDialog(this,
                        "O sistema não possuí cliente inativo.",
                        "seeds",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {

                final BuscarClientesExcluidos pesq = new BuscarClientesExcluidos("Clientes Inativos");
                pesq.setVisible(true);

                ActionListener acaoOk = new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        StringBuffer codigoAluno = new StringBuffer();
                        int codigoCliente = 0;
                        codigoCliente = pesq.getCodigoCliente();
                        codigoAluno.append(codigoCliente);
                        apagar = nomes.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
                        nomes.delete(0, apagar);
                        nomes.append(txtCodigoLocalidade.getText());
                        try {
                            ClientesDAO dao = new ClientesDAO();
                            cliente = dao.carregarClienteInativoPeloCodigo(codigoAluno, nomes);
                            txtCodigo.setText(String.valueOf(cliente.getCodigo()));
                            txtNome.setText(cliente.getNome());
                            if (txtNome.getText().equals("nulo")) {
                                JOptionPane.showMessageDialog(rootPane,
                                        "O cliente informado não consta no banco!\n"
                                        + "Verifique se o código do Local: " + txtCodigoLocalidade.getText() + " é \n"
                                        + "o mesmo do Aluno selecionado.",
                                        "Seeds", JOptionPane.ERROR_MESSAGE);
                                txtCodigoLocalidade.requestFocus();
                            } else {
                            }
                            dao.desconectar();
                        } catch (BancoException b) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        pesq.dispose();
                    }
                };
                pesq.setAcao(acaoOk);
                cliente = null;
            }
        } catch (BancoException f) {
            f.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void PainelFisicoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PainelFisicoMouseEntered
        if (!txtCodigo.getText().equals("")) {
            nomeCliente = txtCodigo.getText();
            try {
                GravarDadosContrato();
            } catch (IOException ex) {
                Logger.getLogger(BuscarClientesContratosExcluir.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                new PagamentosDetalhesContrato().setVisible(true);
            } catch (BancoException ex) {
                Logger.getLogger(PagamentosDetalhes.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(PagamentosDetalhes.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(PagamentosDetalhes.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.dispose();
        }
    }//GEN-LAST:event_PainelFisicoMouseEntered

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (!txtCodigo.getText().equals("")) {
            nomeCliente = txtCodigo.getText();
            try {
                GravarDadosContrato();
            } catch (IOException ex) {
                Logger.getLogger(BuscarClientesContratosExcluir.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                new PagamentosDetalhesContrato().setVisible(true);
            } catch (BancoException ex) {
                Logger.getLogger(PagamentosDetalhes.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(PagamentosDetalhes.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(PagamentosDetalhes.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.dispose();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtNomeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //Já que eu salvo os dados com a função Trin() devo então facilitar a busca por nome
            //Removendo os espaços desnecessários; assim melhoro a resposta a essa busca
            txtNome.setText(txtNome.getText().trim());

            apagar = nome.length();//Devolve o número de caracteres do objeto Stringbuffer apagar
            nome.delete(0, apagar);
            nome.append(txtNome.getText());
            try {
                cliente = dao.carregarCliente(nome);
                if (cliente.getNome().equals("nulo")) {
                    JOptionPane.showMessageDialog(rootPane, "O Cliente informado não consta no banco!");
                } else {
                    txtCodigo.setText(String.valueOf(cliente.getCodigo()));
                    txtNome.setText(cliente.getNome());
                    if (!txtCodigo.getText().equals("")) {
                        nomeCliente = txtCodigo.getText();
                        //contratoCliente = masterTable.getValueAt(linha, 0).toString();
                        try {
                            GravarDadosContrato();
                        } catch (IOException ex) {
                            Logger.getLogger(BuscarClientesContratosExcluir.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            new PagamentosDetalhesContrato().setVisible(true);
                        } catch (BancoException ex) {
                            Logger.getLogger(PagamentosDetalhes.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (SQLException ex) {
                            Logger.getLogger(PagamentosDetalhes.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (ParseException ex) {
                            Logger.getLogger(PagamentosDetalhes.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        this.dispose();
                    }
                }
                cliente = null;
            } catch (BancoException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_txtNomeKeyPressed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PainelFisico;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtCodigoLocalidade;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables
}
